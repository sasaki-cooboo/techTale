import Head from "next/head";
import Layout from "@/features/jobs/Layout";
import SearchContents from "@/features/jobs/SearchContents";
import { GetServerSideProps } from "next";
import fetch from "@/libs/fetch";
import {
  JobAttributesType,
  JobConditionType,
  JobListResponse,
} from "@/features/jobs/job.type";
import Loading from "@/components/Loading";
import { useAtomValue } from "jotai";
import {
  MENU_LIST,
  initialJobCondition,
  jobAtom,
  jobAttributesAtom,
  jobConditionAtom,
  jobConditionDisplayAtom,
  jobSortAtom,
  loadingAtom,
} from "@/atoms/atoms";
import { Typography } from "@mui/material";
import { useHydrateAtoms } from "jotai/utils";
import { convertQueryStringToObject } from "@/libs/convertQuery";
import SearchCondition from "@/features/jobs/SearchCondition";

type Props = {
  jobAttributes: JobAttributesType;
  jobs: JobListResponse;
  condition: JobConditionType;
  sort: (typeof MENU_LIST)[number];
};

export default function Search({
  jobAttributes,
  jobs,
  condition,
  sort,
}: Props) {
  const isLoading = useAtomValue(loadingAtom);
  useHydrateAtoms([
    [jobAtom, jobs],
    [jobConditionAtom, condition],
    [jobConditionDisplayAtom, condition],
    [jobSortAtom, sort],
    [jobAttributesAtom, jobAttributes],
  ]);
  return (
    <>
      <Head>
        <title>エンジニア求人サイト</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <Layout jobAttributes={jobAttributes}>
          <Typography fontSize={24} mb={2} fontWeight={500} variant="h2">
            求人・開発案件一覧
          </Typography>
          <SearchCondition />
          <SearchContents />
        </Layout>
      </div>
      <Loading open={isLoading} />
    </>
  );
}

/**
 * getServerSideProps
 */
export const getServerSideProps: GetServerSideProps = async ({ query }) => {
  try {
    const queryParams = Object.keys(query)
      .map((key) => `${key}=${query[key]}`)
      .join("&");

    // 属性取得
    const { data: jobAttributes } = await fetch.get<JobAttributesType>(
      `/api/v1/jobAttributes`
    );

    // 求人取得
    const { data: jobs } = await fetch.get<JobListResponse>(
      `/api/v1/jobs?${queryParams}`
    );

    // 絞り込み条件を作成
    const condition = {
      ...initialJobCondition,
      ...convertQueryStringToObject(queryParams),
    };

    const sort =
      query.sort === "latest"
        ? MENU_LIST[1]
        : query.sort === "cost"
        ? MENU_LIST[2]
        : MENU_LIST[0];
    return {
      props: {
        jobAttributes,
        jobs,
        condition,
        sort,
        q: query.q || "",
      },
    };
  } catch (error) {
    return {
      notFound: true,
    };
  }
};
