import Head from "next/head";
import Layout from "@/features/jobs/Layout";
import SearchContents from "@/features/jobs/SearchContents";
import { JobAttributesType } from "@/features/jobs/job.type";
import Loading from "@/components/Loading";
import {
  jobAtom,
  jobAttributesAtom,
  jobBookmarkAtom,
  jobConditionAtom,
  jobConditionDisplayAtom,
  jobSortAtom,
  jobTotalCountAtom,
  loadingAtom,
} from "@/atoms/atoms";
import { Typography } from "@mui/material";
import SearchCondition from "@/features/jobs/SearchCondition";
import { useEffect } from "react";
import { useAtom, useSetAtom } from "jotai";
import { useRouter } from "next/router";
import { init } from "@/features/jobs/init";
import { GetServerSideProps } from "next";
import fetch from "@/libs/fetch";
import { useHydrateAtoms } from "jotai/utils";

type Props = {
  jobAttributes: JobAttributesType;
};

export default function Search({ jobAttributes }: Props) {
  const [isLoading, setLoading] = useAtom(loadingAtom);
  const setJobs = useSetAtom(jobAtom);
  const setJobCondition = useSetAtom(jobConditionAtom);
  const setJobConditionDisplay = useSetAtom(jobConditionDisplayAtom);
  const setJobSort = useSetAtom(jobSortAtom);
  const setJobTotalCount = useSetAtom(jobTotalCountAtom);
  const setBookmark = useSetAtom(jobBookmarkAtom);
  const router = useRouter();

  useHydrateAtoms([[jobAttributesAtom, jobAttributes]]);

  useEffect(() => {
    (async () => {
      setLoading(true);
      const result = await init(router.query);
      if (!result) {
        throw new Error("データの取得に失敗しました。");
      }
      const { bookmarkIds, jobs, condition, sort } = result;
      setJobs(jobs);
      setJobCondition(condition);
      setJobConditionDisplay(condition);
      setJobSort(sort);
      setJobTotalCount(jobs.meta.total);
      setBookmark(Object.values(bookmarkIds));
    })()
      .then(() => {
        setLoading(false);
      })
      .catch(() => {
        setLoading(false);
        router.replace("/404.html");
      });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [
    setBookmark,
    setLoading,
    setJobs,
    setJobCondition,
    setJobConditionDisplay,
    setJobSort,
    setJobTotalCount,
  ]);

  return (
    <>
      <Head>
        <title>エンジニア求人サイト</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div>
        <Layout jobAttributes={jobAttributes}>
          <Typography fontSize={24} mb={2} fontWeight={500} variant="h2">
            求人・開発案件一覧
          </Typography>
          <SearchCondition />
          <SearchContents />
        </Layout>
      </div>
      <Loading open={isLoading} />
    </>
  );
}
/**
 * getServerSideProps
 */
export const getServerSideProps: GetServerSideProps = async () => {
  try {
    // 属性はサイドメニューレンダリング時に必要なのでgetServerSidePropsで取得する。
    const { data: jobAttributes } = await fetch.get<JobAttributesType>(
      `/api/v1/jobAttributes`
    );

    return {
      props: {
        jobAttributes,
      },
    };
  } catch (error) {
    return {
      notFound: true,
    };
  }
};
