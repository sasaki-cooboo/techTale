service: laravel

provider:
  name: aws
  # The AWS region in which to deploy (us-east-1 is the default)
  region: ap-northeast-1
  # Environment variables
  httpApi:
    disableDefaultEndpoint: true

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ec2:CreateNetworkInterface"
        - "ec2:DescribeNetworkInterfaces"
        - "ec2:DeleteNetworkInterface"
      Resource:
        - "*"

  vpc:
    securityGroupIds:
      - ${self:custom.secret.SG_ID}
    subnetIds:
      - ${self:custom.secret.SUBNET_ID_1}
      # - ${self:custom.secret.SUBNET_ID_2}

  environment:
    APP_ENV: production # Or use ${sls:stage} if you want the environment to match the stage
    LOG_LEVEL: error
    DB_CONNECTION: mysql
    DB_HOST: ${self:custom.secret.DB_HOST}
    DB_PORT: ${self:custom.secret.DB_PORT}
    DB_DATABASE: ${self:custom.secret.DB_DATABASE}
    DB_USERNAME: ${self:custom.secret.DB_USERNAME}
    DB_PASSWORD: ${self:custom.secret.DB_PASSWORD}
    BASIC_USER: ${self:custom.secret.BASIC_USER}
    BASIC_PASS: ${self:custom.secret.BASIC_PASS}

custom:
  secret: ${file(.secret.yml)}

package:
  # Files and directories to exclude from deployment
  patterns:
    - "!node_modules/**"
    - "!public/storage"
    - "!resources/assets/**"
    - "!storage/**"
    - "!tests/**"

functions:
  # This function runs the Laravel website/API
  web:
    handler: public/index.php
    runtime: php-81-fpm
    timeout: 28 # in seconds (API Gateway has a timeout of 29 seconds)
    events:
      - httpApi: "*"

  # This function lets us run artisan commands in Lambda
  artisan:
    handler: artisan
    runtime: php-81-console
    timeout: 720 # in seconds
    # Uncomment to also run the scheduler every minute
    #events:
    #    - schedule:
    #          rate: rate(1 minute)
    #          input: '"schedule:run"'

plugins:
  # We need to include the Bref plugin
  - ./vendor/bref/bref
